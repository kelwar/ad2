using AutodictorBL.Entites;
using AutodictorBL.Sound;
using CommunicationDevices.DataProviders;
using Domain.Entitys;
using Library.Convertion;
using Library.Logs;
using MainExample.Extension;
using MainExample.Mappers;
using MainExample.Services;
using MainExample.Services.FactoryServices;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MainExample
{
    public class SoundManager
    {
        public TaskManagerService TaskManager = new TaskManagerService();

        private const int ВремяЗадержкиВоспроизведенныхСобытий = 20;  //сек
        private bool РазрешениеРаботы = true;

        public void СозданиеСтатическихЗвуковыхФайлов()
        {
            int id = 1;
            foreach (SoundConfigurationRecord config in SoundConfiguration.SoundConfigurationRecords)
            {
                var статСообщение = Mapper.MapSoundConfigurationRecord2СтатическоеСообщение(config, ref id);
                if (статСообщение != null && статСообщение.Any())
                {
                    foreach (var стат in статСообщение)
                    {
                        var statRecord = стат;
                        int попыткиВставитьСообщение = 5;
                        while (попыткиВставитьСообщение-- > 0)
                        {
                            string Key = statRecord.Время.ToString(MainWindowForm.DATETIME_KEYFORMAT);
                            string[] SubKeys = Key.Split(':');
                            if (SubKeys[0].Length == 1)
                                Key = "0" + Key;

                            if (MainWindowForm.СтатическиеЗвуковыеСообщения.ContainsKey(Key))
                            {
                                statRecord.Время = statRecord.Время.AddSeconds(1);
                                continue;
                            }

                            MainWindowForm.СтатическиеЗвуковыеСообщения.Add(Key, statRecord);
                            break;
                        }
                    }
                }
            }
        }

        public SoundRecord ЗаполнениеСпискаНештатныхСитуаций(SoundRecord данные, string key)
        {
            try
            {
                if ((данные.БитыНештатныхСитуаций & 0x0F) == 0x00)
                    return данные;

                DateTime временноеВремяСобытия = (данные.БитыАктивностиПолей & 0x04) != 0x00 ? данные.ВремяПрибытия : данные.ВремяОтправления;
                string формируемоеСообщение = "";

                //Сформируем список нештатных сообщений--------------------------------------
                var startDate = временноеВремяСобытия.AddHours(-10);
                //var endDate = временноеВремяСобытия.AddHours(27 - DateTime.Now.Hour); //часы до конца суток  +3 часа
                var endDate = (данные.БитыНештатныхСитуаций & 0x02) != 0x00 ?
                              данные.ActualArrivalTime - TimeSpan.FromMinutes(Program.Настройки.ArrivalDelay) :
                              данные.ActualDepartureTime - TimeSpan.FromMinutes(Program.Настройки.DepartureDelay); //часы до конца суток  +3 часа
                List<СостояниеФормируемогоСообщенияИШаблон> текущийСписокНештатныхСообщений = new List<СостояниеФормируемогоСообщенияИШаблон>();


                int типПоезда = (int)данные.ТипПоезда;
                int indexШаблона = 1000;              //нештатные сообшения индексируются от 1000
                float interval = 5.0f;
                switch (данные.БитыНештатныхСитуаций)
                {
                    case 0x01:
                        interval = Program.Настройки.ИнтервалМеждуОповещениемОбОтменеПоезда;
                        startDate = временноеВремяСобытия.AddHours(-1);
                        break;
                    case 0x02:
                        interval = Program.Настройки.ИнтервалМеждуОповещениемОЗадержкеПрибытияПоезда;
                        break;
                    case 0x04:
                        interval = Program.Настройки.ИнтервалМеждуОповещениемОЗадержкеОтправленияПоезда;
                        break;
                    case 0x08:
                        interval = Program.Настройки.ИнтервалМеждуОповещениемООтправлениеПоГотовности;
                        break;
                    case 0x10:
                        interval = Program.Настройки.ИнтервалМеждуОповещениемОЗадержкеОтправленияПоезда;
                        break;
                }
                for (var date = startDate; date < endDate; date = date.AddMinutes(interval))
                {
                    СостояниеФормируемогоСообщенияИШаблон новыйШаблон;
                    новыйШаблон.Id = indexШаблона++;
                    новыйШаблон.SoundRecordId = данные.ID;
                    новыйШаблон.Активность = данные.Активность;
                    новыйШаблон.ПриоритетГлавный = Priority.Midlle;
                    новыйШаблон.ПриоритетВторостепенный = PriorityPrecise.One;
                    новыйШаблон.Воспроизведен = false;
                    новыйШаблон.СостояниеВоспроизведения = SoundRecordStatus.ОжиданиеВоспроизведения;
                    новыйШаблон.ВремяСмещения = (((временноеВремяСобытия - date).Hours * 60) + (временноеВремяСобытия - date).Minutes) * -1;
                    новыйШаблон.НазваниеШаблона = String.Empty;
                    новыйШаблон.Шаблон = String.Empty;
                    новыйШаблон.ПривязкаКВремени = ((данные.БитыАктивностиПолей & 0x04) != 0x00) ? 0 : 1;
                    новыйШаблон.ЯзыкиОповещения = new List<NotificationLanguage> { NotificationLanguage.Ru, NotificationLanguage.Eng };

                    if ((данные.БитыНештатныхСитуаций & 0x01) != 0x00)
                    {
                        новыйШаблон.НазваниеШаблона = "Авария:Отмена";
                        формируемоеСообщение = Program.ШаблонОповещенияОбОтменеПоезда[типПоезда];
                    }
                    else if ((данные.БитыНештатныхСитуаций & 0x02) != 0x00)
                    {
                        новыйШаблон.НазваниеШаблона = "Авария:ЗадержкаПрибытия";
                        формируемоеСообщение = Program.ШаблонОповещенияОЗадержкеПрибытияПоезда[типПоезда];
                    }
                    else if ((данные.БитыНештатныхСитуаций & 0x04) != 0x00)
                    {
                        новыйШаблон.НазваниеШаблона = "Авария:ЗадержкаОтправления";
                        формируемоеСообщение = Program.ШаблонОповещенияОЗадержкеОтправленияПоезда[типПоезда];
                    }
                    else if ((данные.БитыНештатныхСитуаций & 0x08) != 0x00)
                    {
                        новыйШаблон.НазваниеШаблона = "Авария:ОтправлениеПоГотов.";
                        формируемоеСообщение = Program.ШаблонОповещенияООтправлениеПоГотовностиПоезда[типПоезда];
                    }
                    else if ((данные.БитыНештатныхСитуаций & 0x10) != 0x00)
                    {
                        новыйШаблон.НазваниеШаблона = "Авария:ЗадержкаПосадки";
                        формируемоеСообщение = Program.LandingDelaySoundTemplate[типПоезда];
                    }

                    if (формируемоеСообщение != "")
                    {
                        foreach (var Item in DynamicSoundForm.DynamicSoundRecords)
                            if (Item.Name == формируемоеСообщение)
                            {
                                новыйШаблон.Шаблон = Item.Message;
                                break;
                            }
                    }

                    текущийСписокНештатныхСообщений.Add(новыйШаблон);
                }

                данные.СписокНештатныхСообщений = текущийСписокНештатныхСообщений;

                if (!string.IsNullOrEmpty(key))
                {
                    lock (MainWindowForm.SoundRecords_Lock)
                    {
                        MainWindowForm.SoundRecords[key] = данные;
                    }
                }
            }
            catch (Exception ex)
            {
                Log.log.Error(ex);
            }

            return данные;
        }

        // Формирование очереди воспроизведения звуковых файлов, вызывается таймером каждые 100 мс.
        public void ОбработкаЗвуковогоПотка()
        {
            if (MainWindowForm.myMainForm == null)
                return;

            ОпределитьКомпозициюДляЗапуска();
            CheckAutoApdate();

            MainWindowForm.myMainForm.ОбновитьСостояниеЗаписейТаблицы();

            SetSoundPlayerStatus(Program.AutodictorModel.SoundPlayer.GetPlayerStatus());
        }
        // Определение композиций для запуска в данный момент времени
        private void ОпределитьКомпозициюДляЗапуска()
        {
            if (MainWindowForm.myMainForm == null)
                return;

            bool СообщениеИзменено;

            TaskManager.Clear();



            #region Определить композицию для запуска статических сообщений
            for (int i = 0; i < MainWindowForm.СтатическиеЗвуковыеСообщения.Count(); i++)
            {
                string Key = MainWindowForm.СтатическиеЗвуковыеСообщения.ElementAt(i).Key;
                СтатическоеСообщение Сообщение = MainWindowForm.СтатическиеЗвуковыеСообщения.ElementAt(i).Value;
                СообщениеИзменено = false;


                if (DateTime.Now < Сообщение.Время)
                {
                    if (Сообщение.СостояниеВоспроизведения != SoundRecordStatus.ОжиданиеВоспроизведения)
                    {
                        Сообщение.СостояниеВоспроизведения = SoundRecordStatus.ОжиданиеВоспроизведения;
                        СообщениеИзменено = true;
                    }
                }
                else if (DateTime.Now > Сообщение.Время.AddSeconds(1))
                {
                    if (MainWindowForm.QueueSound.FindItem(Сообщение.ID, null) == null)            //Если нету элемента в очереди сообщений, то запись уже воспроизведенна.
                    {
                        if (Сообщение.СостояниеВоспроизведения != SoundRecordStatus.Воспроизведена)
                        {
                            Сообщение.СостояниеВоспроизведения = SoundRecordStatus.Воспроизведена;
                            СообщениеИзменено = true;
                        }
                    }
                }
                else if (Сообщение.СостояниеВоспроизведения == SoundRecordStatus.ОжиданиеВоспроизведения)
                {
                    СообщениеИзменено = true;
                    Сообщение.СостояниеВоспроизведения = SoundRecordStatus.ДобавленВОчередьАвтомат;
                    if (Сообщение.Активность == true)
                        foreach (var Sound in StaticSoundForm.StaticSoundRecords)
                        {
                            if (Sound.Name == Сообщение.НазваниеКомпозиции)
                            {
                                if (РазрешениеРаботы == true)
                                {
                                    Program.ЗаписьЛога("Автоматическое воспроизведение статического звукового сообщения", Сообщение.НазваниеКомпозиции, Program.AuthenticationService.CurrentUser);
                                    var воспроизводимоеСообщение = new ВоспроизводимоеСообщение
                                    {
                                        ParentId = null,
                                        RootId = Сообщение.ID,
                                        ТипСообщения = ТипСообщения.Статическое,
                                        ИмяВоспроизводимогоФайла = Sound.Name,
                                        ПриоритетГлавный = Priority.Low,
                                        ПриоритетВторостепенный = PriorityPrecise.Zero,
                                        Язык = NotificationLanguage.Ru,
                                        ОчередьШаблона = null
                                    };
                                    MainWindowForm.QueueSound.AddItem(воспроизводимоеСообщение);
                                }
                                break;
                            }
                        }
                }

                if (СообщениеИзменено == true)
                    MainWindowForm.СтатическиеЗвуковыеСообщения[Key] = Сообщение;


                //Добавление события ===================================================================
                if (DateTime.Now > Сообщение.Время.AddMinutes(-30) &&
                    !(Сообщение.СостояниеВоспроизведения == SoundRecordStatus.Воспроизведена && DateTime.Now > Сообщение.Время.AddSeconds(ВремяЗадержкиВоспроизведенныхСобытий))) //убрать через 5 мин. после воспроизведения
                {
                    byte состояниеСтроки = 0;
                    switch (Сообщение.СостояниеВоспроизведения)
                    {
                        case SoundRecordStatus.Воспроизведена:
                        case SoundRecordStatus.Выключена:
                            состояниеСтроки = 0;
                            break;

                        case SoundRecordStatus.ДобавленВОчередьАвтомат:
                        case SoundRecordStatus.ОжиданиеВоспроизведения:
                            состояниеСтроки = 2;
                            break;

                        case SoundRecordStatus.ВоспроизведениеАвтомат:
                            состояниеСтроки = 4;
                            break;
                    }

                    var statSound = StaticSoundForm.StaticSoundRecords.FirstOrDefault(sound => sound.Name == Сообщение.НазваниеКомпозиции);
                    TaskSound taskSound = new TaskSound
                    {
                        НомерСписка = 1,
                        СостояниеСтроки = состояниеСтроки,
                        Описание = Сообщение.НазваниеКомпозиции,
                        Время = Сообщение.Время,
                        Ключ = Key,
                        ParentId = null,
                        ШаблонИлиСообщение = statSound.Message
                    };

                    if (Сообщение.Активность == false)
                        taskSound.СостояниеСтроки = 0;

                    TaskManager.AddItem(taskSound);
                }
            }
            #endregion

            #region Определить композицию для запуска сообщений о движении поездов
            DateTime ТекущееВремя = DateTime.Now;
            bool внесеныИзменения = false;

            for (int i = 0; i < MainWindowForm.SoundRecords.Count; i++)
            {
                KeyValuePair<string, SoundRecord> record;
                lock (MainWindowForm.SoundRecords_Lock)
                {
                    record = MainWindowForm.SoundRecords.ElementAt(i);
                }
                var key = record.Key;
                var Данные = record.Value;
                внесеныИзменения = false;

                while (true)
                {
                    if (Данные.Активность == true)
                    {
                        var time = Данные.ActualArrivalTime > Данные.ActualDepartureTime ? Данные.ActualArrivalTime : Данные.ActualDepartureTime;
                        if (((Данные.БитыНештатныхСитуаций & 0x01) != 0x00 && time < ТекущееВремя) ||
                            ((Данные.БитыНештатныхСитуаций & 0x02) != 0x00 && Данные.ВремяЗадержки.HasValue && (Данные.ВремяЗадержки.Value.Minute != 0 || Данные.ВремяЗадержки.Value.Second != 0) && Данные.ActualArrivalTime < ТекущееВремя) ||
                            ((Данные.БитыНештатныхСитуаций & 0x04) != 0x00 && Данные.ВремяЗадержки.HasValue && (Данные.ВремяЗадержки.Value.Minute != 0 || Данные.ВремяЗадержки.Value.Second != 0) && Данные.ActualDepartureTime < ТекущееВремя))// ||
                                                                                                                                                                                                                                                //((Данные.БитыНештатныхСитуаций & 0x10) != 0x00 && Данные.ВремяЗадержки.HasValue && (Данные.ВремяЗадержки.Value.Minute != 0 || Данные.ВремяЗадержки.Value.Second != 0) && Данные.ActualDepartureTime < ТекущееВремя))
                                                                                                                                                                                                                                                //((Данные.БитыНештатныхСитуаций & 0x02) != 0x00 && Данные.DelayTime.HasValue && (Данные.DelayTime.Value.TotalHours != 0 || Данные.DelayTime.Value.Minutes != 0) && Данные.ActualArrivalTime < ТекущееВремя) ||
                                                                                                                                                                                                                                                //((Данные.БитыНештатныхСитуаций & 0x04) != 0x00 && Данные.DelayTime.HasValue && (Данные.DelayTime.Value.TotalHours != 0 || Данные.DelayTime.Value.Minutes != 0) && Данные.ActualDepartureTime < ТекущееВремя))
                        {
                            Данные.БитыНештатныхСитуаций = 0x00;
                            Program.ЗаписьЛога("Действие программы", $"Поезд {Данные.НомерПоезда} {Данные.СтанцияОтправления}-{Данные.СтанцияНазначения} {Данные.Время}. Ожидаемое время события меньше, чем текущее. Флаг нештатной ситуации снят", Program.AuthenticationService?.CurrentUser ?? null);
                        }

                        #region Нештатные ситуации
                        if ((Данные.БитыНештатныхСитуаций & 0x0F) == 0x00)
                            Данные.СписокНештатныхСообщений.Clear();

                        // Проверка на нештатные ситуации
                        if ((Данные.БитыНештатныхСитуаций & 0x0F) != 0x00)
                        {

                            if (Данные.СостояниеКарточки != 6 && (Данные.БитыНештатныхСитуаций & 0x01) != 0x00)
                            {
                                Данные.ОписаниеСостоянияКарточки = "Поезд отменен";
                                Данные.СостояниеКарточки = 6;
                                внесеныИзменения = true;
                            }
                            else
                            if (Данные.СостояниеКарточки != 16 && (Данные.БитыНештатныхСитуаций & 0x02) != 0x00)
                            {
                                Данные.ОписаниеСостоянияКарточки = "Задержка прибытия поезда";
                                Данные.СостояниеКарточки = 16;
                                внесеныИзменения = true;
                            }
                            else
                            if (Данные.СостояниеКарточки != 26 && (Данные.БитыНештатныхСитуаций & 0x04) != 0x00)
                            {
                                Данные.ОписаниеСостоянияКарточки = "Задержка отправления поезда";
                                Данные.СостояниеКарточки = 26;
                                внесеныИзменения = true;
                            }
                            else
                            if (Данные.СостояниеКарточки != 36 && (Данные.БитыНештатныхСитуаций & 0x08) != 0x00)
                            {
                                Данные.ОписаниеСостоянияКарточки = "Отправление по готовности поезда";
                                Данные.СостояниеКарточки = 36;
                                внесеныИзменения = true;
                            }
                            else
                            if (Данные.СостояниеКарточки != 46 && (Данные.БитыНештатныхСитуаций & 0x10) != 0x00)
                            {
                                Данные.ОписаниеСостоянияКарточки = "Задержка посадки поезда";
                                Данные.СостояниеКарточки = 46;
                                внесеныИзменения = true;
                            }



                            if (Данные.Автомат)
                            {
                                //НЕШТАТНОЕ СОБЫТИЕ========================================================================
                                for (int j = 0; j < Данные.СписокНештатныхСообщений.Count; j++)
                                {
                                    var нештатноеСообщение = Данные.СписокНештатныхСообщений[j];
                                    if (нештатноеСообщение.Активность == true)
                                    {
                                        DateTime времяСобытия = нештатноеСообщение.ПривязкаКВремени == 0 ? Данные.ВремяПрибытия : Данные.ВремяОтправления;
                                        времяСобытия = времяСобытия.AddMinutes(нештатноеСообщение.ВремяСмещения);

                                        if (DateTime.Now < времяСобытия)
                                        {
                                            if (нештатноеСообщение.СостояниеВоспроизведения != SoundRecordStatus.ОжиданиеВоспроизведения)
                                            {
                                                нештатноеСообщение.СостояниеВоспроизведения = SoundRecordStatus.ОжиданиеВоспроизведения;
                                                Данные.СписокНештатныхСообщений[j] = нештатноеСообщение;
                                                внесеныИзменения = true;
                                            }
                                        }
                                        else if (DateTime.Now >= времяСобытия.AddSeconds(1))
                                        {
                                            if (MainWindowForm.QueueSound.FindItem(Данные.ID, нештатноеСообщение.Id) == null) //Если нету элемента в очереди сообщений, то запись уже воспроизведенна.
                                            {
                                                if (нештатноеСообщение.СостояниеВоспроизведения != SoundRecordStatus.Воспроизведена)
                                                {
                                                    нештатноеСообщение.СостояниеВоспроизведения = SoundRecordStatus.Воспроизведена;
                                                    Данные.СписокНештатныхСообщений[j] = нештатноеСообщение;
                                                    внесеныИзменения = true;
                                                }
                                            }
                                        }
                                        else if (нештатноеСообщение.СостояниеВоспроизведения == SoundRecordStatus.ОжиданиеВоспроизведения)
                                        {
                                            // СРАБОТКА------------------------------------------------------------
                                            if ((ТекущееВремя.Hour == времяСобытия.Hour) && (ТекущееВремя.Minute == времяСобытия.Minute) && (ТекущееВремя.Second == времяСобытия.Second))
                                            {
                                                нештатноеСообщение.СостояниеВоспроизведения = SoundRecordStatus.ДобавленВОчередьАвтомат;
                                                Данные.СписокНештатныхСообщений[j] = нештатноеСообщение;
                                                внесеныИзменения = true;

                                                if (РазрешениеРаботы && (нештатноеСообщение.Шаблон != ""))
                                                {
                                                    СостояниеФормируемогоСообщенияИШаблон шаблонФормируемогоСообщения = new СостояниеФормируемогоСообщенияИШаблон
                                                    {
                                                        Id = нештатноеСообщение.Id,
                                                        SoundRecordId = Данные.ID,
                                                        ПриоритетГлавный = Priority.Midlle,
                                                        Шаблон = нештатноеСообщение.Шаблон,
                                                        ЯзыкиОповещения =
                                                            new List<NotificationLanguage>
                                                            {
                                                                        NotificationLanguage.Ru,
                                                                        NotificationLanguage.Eng
                                                            },
                                                        //TODO: вычислять языки оповещения 
                                                        НазваниеШаблона = нештатноеСообщение.НазваниеШаблона,
                                                    };
                                                    ВоспроизвестиШаблонОповещения("Автоматическое воспроизведение сообщения о внештатной ситуации", Данные, шаблонФормируемогоСообщения, ТипСообщения.ДинамическоеАварийное);
                                                }
                                            }
                                        }

                                        if (DateTime.Now > времяСобытия.AddMinutes(-30) && !(нештатноеСообщение.СостояниеВоспроизведения == SoundRecordStatus.Воспроизведена && DateTime.Now > времяСобытия.AddSeconds(ВремяЗадержкиВоспроизведенныхСобытий)))//убрать через 5 мин. после воспроизведения
                                        {
                                            byte состояниеСтроки = 0;
                                            switch (нештатноеСообщение.СостояниеВоспроизведения)
                                            {
                                                case SoundRecordStatus.Воспроизведена:
                                                case SoundRecordStatus.Выключена:
                                                    состояниеСтроки = 0;
                                                    break;

                                                case SoundRecordStatus.ДобавленВОчередьАвтомат:
                                                case SoundRecordStatus.ОжиданиеВоспроизведения:
                                                    состояниеСтроки = 3;
                                                    break;

                                                case SoundRecordStatus.ВоспроизведениеАвтомат:
                                                    состояниеСтроки = 4;
                                                    break;
                                            }

                                            TaskSound taskSound = new TaskSound
                                            {
                                                НомерСписка = 0,
                                                СостояниеСтроки = состояниеСтроки,
                                                Описание = Данные.НомерПоезда + " " + Данные.НазваниеПоезда + ": " + Данные.ОписаниеСостоянияКарточки,
                                                Время = времяСобытия,
                                                Ключ = key,
                                                ParentId = нештатноеСообщение.Id,
                                                ШаблонИлиСообщение = нештатноеСообщение.Шаблон
                                            };

                                            TaskManager.AddItem(taskSound);
                                        }
                                    }
                                }
                            }
                            //break; // Запретили break, чтобы шаблоны воспроизводились даже в случае нештатной ситуации
                        }
                        #endregion

                        #region Проверка на наличие шаблонов оповещения
                        // Проверка на наличие шаблонов оповещения
                        if (Данные.СписокФормируемыхСообщений.Count == 0)
                        {
                            if ((Данные.БитыНештатныхСитуаций & 0x0F) == 0x00 && Данные.СостояниеКарточки != 1)
                            {
                                Данные.СостояниеКарточки = 1;
                                Данные.ОписаниеСостоянияКарточки = "Нет шаблонов оповещения";
                                внесеныИзменения = true;
                            }

                            break;
                        }


                        ОбработкаРучногоВоспроизведенияШаблона(ref Данные, key);
                        #endregion


                        #region Проверка на приближения времени оповещения(за 30 минут)
                        //Проверка на приближения времени оповещения(за 30 минут)
                        DateTime СамоеРаннееВремя = DateTime.Now, СамоеПозднееВремя = DateTime.Now;
                        for (int j = 0; j < Данные.СписокФормируемыхСообщений.Count; j++)
                        {
                            var формируемоеСообщение = Данные.СписокФормируемыхСообщений[j];
                            if (!Данные.Автомат)
                            {
                                if (формируемоеСообщение.НазваниеШаблона.StartsWith("@") &&
                                   (Данные.ФиксированноеВремяПрибытия == null))
                                {
                                    continue;
                                }
                            }

                            var ручноШаблон = формируемоеСообщение.НазваниеШаблона.StartsWith("@");
                            var времяПриб = (Данные.ФиксированноеВремяПрибытия == null || !ручноШаблон) ? Данные.ВремяПрибытия : Данные.ФиксированноеВремяПрибытия.Value;
                            var времяОтпр = (Данные.ФиксированноеВремяПрибытия == null || !ручноШаблон) ? Данные.ВремяОтправления : Данные.ФиксированноеВремяОтправления.Value;
                            //var времяПриб = (Данные.ФиксированноеВремяПрибытия == null || !ручноШаблон) ? Данные.ActualArrivalTime : Данные.ФиксированноеВремяПрибытия.Value;
                            //var времяОтпр = (Данные.ФиксированноеВремяПрибытия == null || !ручноШаблон) ? Данные.ActualDepartureTime : Данные.ФиксированноеВремяОтправления.Value;
                            DateTime времяСобытия = формируемоеСообщение.ПривязкаКВремени == 0 ? времяПриб : времяОтпр;
                            времяСобытия = времяСобытия.AddMinutes(формируемоеСообщение.ВремяСмещения);
                            if (j == 0)
                            {
                                СамоеРаннееВремя = СамоеПозднееВремя = времяСобытия;
                            }
                            else
                            {
                                if (времяСобытия < СамоеРаннееВремя)
                                    СамоеРаннееВремя = времяСобытия;

                                if (времяСобытия > СамоеПозднееВремя)
                                    СамоеПозднееВремя = времяСобытия;
                            }
                        }


                        if (DateTime.Now < СамоеРаннееВремя.AddMinutes(Program.Настройки.ОповещениеСамогоРаннегоВремениШаблона))
                        {
                            if (!Данные.Автомат)
                            {
                                if ((Данные.БитыНештатныхСитуаций & 0x0F) == 0x00 && Данные.СостояниеКарточки != 7)
                                {
                                    Данные.СостояниеКарточки = 7;
                                    Данные.ОписаниеСостоянияКарточки = "Рано в ручном";
                                    внесеныИзменения = true;
                                }
                            }
                            else
                            if ((Данные.БитыНештатныхСитуаций & 0x0F) == 0x00 && Данные.СостояниеКарточки != 2)
                            {
                                Данные.СостояниеКарточки = 2;
                                Данные.ОписаниеСостоянияКарточки = "Рано";
                                внесеныИзменения = true;
                            }

                            break;
                        }

                        if (DateTime.Now > СамоеПозднееВремя.AddMinutes(3))
                        {
                            if ((Данные.БитыНештатныхСитуаций & 0x0F) == 0x00 && Данные.СостояниеКарточки != 0)
                            {
                                Данные.СостояниеКарточки = 0;
                                Данные.ОписаниеСостоянияКарточки = "Поздно";
                                внесеныИзменения = true;
                            }

                            break;
                        }
                        #endregion

                        #region Проверка на установку пути
                        //Проверка на установку пути
                        if (string.IsNullOrWhiteSpace(Данные.НомерПути))
                        {
                            if (!Данные.Автомат) //в РУЧНОМ режиме отсутсвие пути не отображаем
                            {
                                if ((Данные.БитыНештатныхСитуаций & 0x0F) == 0x00 && Данные.СостояниеКарточки != 7)
                                {
                                    Данные.СостояниеКарточки = 7;
                                    Данные.ОписаниеСостоянияКарточки = "";
                                    внесеныИзменения = true;
                                }
                            }
                            else
                            if ((Данные.БитыНештатныхСитуаций & 0x0F) == 0x00 && Данные.СостояниеКарточки != 3)
                            {
                                Данные.СостояниеКарточки = 3;
                                Данные.ОписаниеСостоянияКарточки = "Нет пути";
                                внесеныИзменения = true;
                            }
                            break;
                        }
                        #endregion

                        #region ОБЛАСТЬ СРАБОТКИ ШАБЛОНОВ
                        //ОБЛАСТЬ СРАБОТКИ ШАБЛОНОВ
                        int КоличествоВключенныхГалочек = 0;
                        for (int j = 0; j < Данные.СписокФормируемыхСообщений.Count; j++)
                        {
                            var формируемоеСообщение = Данные.СписокФормируемыхСообщений[j];
                            var ручноШаблон = формируемоеСообщение.НазваниеШаблона.StartsWith("@");
                            if (!Данные.Автомат)
                            {
                                if (ручноШаблон && Данные.ФиксированноеВремяПрибытия == null)
                                {
                                    continue;
                                }
                            }

                            //var времяПриб = (Данные.ФиксированноеВремяПрибытия == null || !ручноШаблон) ? Данные.ВремяПрибытия : Данные.ФиксированноеВремяПрибытия.Value;
                            //var времяОтпр = (Данные.ФиксированноеВремяПрибытия == null || !ручноШаблон) ? Данные.ВремяОтправления : Данные.ФиксированноеВремяОтправления.Value;
                            var времяПриб = (Данные.ФиксированноеВремяПрибытия == null || !ручноШаблон) ? Данные.ActualArrivalTime : Данные.ФиксированноеВремяПрибытия.Value;
                            var времяОтпр = (Данные.ФиксированноеВремяПрибытия == null || !ручноШаблон) ? Данные.ActualDepartureTime : Данные.ФиксированноеВремяОтправления.Value;
                            DateTime времяСобытия = формируемоеСообщение.ПривязкаКВремени == 0 ? времяПриб : времяОтпр;
                            if (времяСобытия != DateTime.MinValue || формируемоеСообщение.ВремяСмещения > 0)
                                времяСобытия = времяСобытия.AddMinutes(формируемоеСообщение.ВремяСмещения);

                            if (формируемоеСообщение.Активность == true)
                            {
                                КоличествоВключенныхГалочек++;
                                if (формируемоеСообщение.Воспроизведен == false)
                                {
                                    if (DateTime.Now < времяСобытия)
                                    {
                                        if (формируемоеСообщение.СостояниеВоспроизведения != SoundRecordStatus.ОжиданиеВоспроизведения)
                                        {
                                            формируемоеСообщение.СостояниеВоспроизведения = SoundRecordStatus.ОжиданиеВоспроизведения;
                                            Данные.СписокФормируемыхСообщений[j] = формируемоеСообщение;
                                            внесеныИзменения = true;
                                        }
                                    }
                                    else if (DateTime.Now >= времяСобытия.AddSeconds(1))
                                    {
                                        if (MainWindowForm.QueueSound.FindItem(Данные.ID, формируемоеСообщение.Id) == null) //Если нету элемента в очереди сообщений, то запись уже воспроизведенна.
                                        {
                                            if (формируемоеСообщение.СостояниеВоспроизведения != SoundRecordStatus.Воспроизведена)
                                            {
                                                формируемоеСообщение.СостояниеВоспроизведения = SoundRecordStatus.Воспроизведена;
                                                Данные.СписокФормируемыхСообщений[j] = формируемоеСообщение;
                                                внесеныИзменения = true;
                                            }
                                        }
                                    }
                                    else if (формируемоеСообщение.СостояниеВоспроизведения == SoundRecordStatus.ОжиданиеВоспроизведения)
                                    {
                                        //СРАБОТКА-------------------------------
                                        if ((ТекущееВремя.Hour == времяСобытия.Hour) && (ТекущееВремя.Minute == времяСобытия.Minute) && (ТекущееВремя.Second >= времяСобытия.Second))
                                        {
                                            формируемоеСообщение.СостояниеВоспроизведения = SoundRecordStatus.ДобавленВОчередьАвтомат;
                                            Данные.СписокФормируемыхСообщений[j] = формируемоеСообщение;
                                            внесеныИзменения = true;

                                            if (РазрешениеРаботы == true)
                                                ВоспроизвестиШаблонОповещения("Автоматическое воспроизведение расписания", Данные, формируемоеСообщение, ТипСообщения.Динамическое);
                                        }
                                    }


                                    //Динамическое сообщение попадет в список если ФормируемоеСообщение еще не воспроезведенно  и не прошло 1мин с момента попадания в список.
                                    //==================================================================================
                                    if (DateTime.Now > времяСобытия.AddMinutes(-30) && !(формируемоеСообщение.СостояниеВоспроизведения == SoundRecordStatus.Воспроизведена && DateTime.Now > времяСобытия.AddSeconds(ВремяЗадержкиВоспроизведенныхСобытий)))
                                    {
                                        byte состояниеСтроки = 0;
                                        switch (формируемоеСообщение.СостояниеВоспроизведения)
                                        {
                                            case SoundRecordStatus.Воспроизведена:
                                            case SoundRecordStatus.Выключена:
                                                состояниеСтроки = 0;
                                                break;

                                            case SoundRecordStatus.ДобавленВОчередьАвтомат:
                                            case SoundRecordStatus.ОжиданиеВоспроизведения:
                                                состояниеСтроки = 1;
                                                break;

                                            case SoundRecordStatus.ВоспроизведениеАвтомат:
                                                состояниеСтроки = 4;
                                                break;
                                        }

                                        TaskSound taskSound = new TaskSound
                                        {
                                            НомерСписка = 0,
                                            СостояниеСтроки = состояниеСтроки,
                                            Описание = Данные.НомерПоезда + " " + Данные.НазваниеПоезда + ": " + формируемоеСообщение.НазваниеШаблона,
                                            Время = времяСобытия,
                                            Ключ = key,
                                            ParentId = формируемоеСообщение.Id,
                                            ШаблонИлиСообщение = формируемоеСообщение.Шаблон
                                        };

                                        TaskManager.AddItem(taskSound);
                                    }
                                }
                            }
                        }
                        #endregion

                        #region Проверка количества включенных галок
                        var количествоЭлементов = Данные.Автомат
                            ? Данные.СписокФормируемыхСообщений.Count
                            : Данные.СписокФормируемыхСообщений.Count(s => !s.НазваниеШаблона.StartsWith("@"));

                        if (КоличествоВключенныхГалочек < количествоЭлементов)
                        {
                            if ((Данные.БитыНештатныхСитуаций & 0x0F) == 0x00 && Данные.СостояниеКарточки != 4)
                            {
                                Данные.СостояниеКарточки = 4;
                                Данные.ОписаниеСостоянияКарточки = "Не все шаблоны разрешены";
                                внесеныИзменения = true;
                            }
                        }
                        else
                        {
                            if ((Данные.БитыНештатныхСитуаций & 0x0F) == 0x00 && Данные.СостояниеКарточки != 5)
                            {
                                Данные.СостояниеКарточки = 5;
                                Данные.ОписаниеСостоянияКарточки = "Все шаблоны разрешены";
                                внесеныИзменения = true;
                            }
                        }

                        if (!Данные.Автомат)
                        {
                            if ((Данные.БитыНештатныхСитуаций & 0x0F) == 0x00 && Данные.СостояниеКарточки != 8)
                            {
                                Данные.СостояниеКарточки = 8;
                                Данные.ОписаниеСостоянияКарточки = "Ручной режим с выставленным путем";
                                внесеныИзменения = true;
                            }
                        }
                        #endregion
                    }
                    else
                    {
                        if ((Данные.БитыНештатныхСитуаций & 0x0F) == 0x00 && Данные.СостояниеКарточки != 0)
                        {
                            Данные.СостояниеКарточки = 0;
                            Данные.ОписаниеСостоянияКарточки = "Отключена";
                            внесеныИзменения = true;
                        }
                    }

                    break;
                }


                if (внесеныИзменения)
                {
                    lock (MainWindowForm.SoundRecords_Lock)
                    {
                        //string Key = SoundRecords.ElementAt(i).Key;
                        MainWindowForm.SoundRecords.Remove(key);
                        MainWindowForm.SoundRecords.Add(key, Данные);
                    }
                }
            }
            #endregion



            #region Определить композицию для запуска технического сообщения

            for (int i = 0; i < TechnicalMessageForm.SoundRecords.Count; i++)
            {
                var record = TechnicalMessageForm.SoundRecords[i];
                if (record.СписокФормируемыхСообщений.Any())
                {
                    var формируемоеСообщение = record.СписокФормируемыхСообщений[0];
                    if (формируемоеСообщение.СостояниеВоспроизведения == SoundRecordStatus.ДобавленВОчередьРучное ||
                        формируемоеСообщение.СостояниеВоспроизведения == SoundRecordStatus.ВоспроизведениеРучное)
                    {
                        byte состояниеСтроки = 0;
                        switch (формируемоеСообщение.СостояниеВоспроизведения)
                        {
                            case SoundRecordStatus.ДобавленВОчередьРучное:
                                состояниеСтроки = 1;
                                break;

                            case SoundRecordStatus.ВоспроизведениеРучное:
                                состояниеСтроки = 4;
                                break;
                        }

                        TaskSound taskSound = new TaskSound
                        {
                            НомерСписка = 0,
                            СостояниеСтроки = состояниеСтроки,
                            Описание = формируемоеСообщение.НазваниеШаблона,
                            Время = record.Время,
                            Ключ = i.ToString(),                                // Здесь было неверное выражение, ссылающееся на ключ SoundRecords, который не имеет отношения
                                                                                // к техническим сообщениям
                            ParentId = формируемоеСообщение.Id,
                            ШаблонИлиСообщение = формируемоеСообщение.Шаблон
                        };

                        TaskManager.AddItem(taskSound);
                    }
                    else
                    {
                        TechnicalMessageForm.SoundRecords.RemoveAt(i);
                    }
                }
            }
            #endregion
            
            MainWindowForm.myMainForm.RefreshTableStateAndDisplaySubtitles();
        }

        private void ОбработкаРучногоВоспроизведенияШаблона(ref SoundRecord Данные, string key)
        {
            foreach (var формируемоеСообщение in Данные.СписокФормируемыхСообщений)
            {
                DateTime времяСобытия = формируемоеСообщение.ПривязкаКВремени == 0 ? Данные.ВремяПрибытия : Данные.ВремяОтправления;
                времяСобытия = времяСобытия.AddMinutes(формируемоеСообщение.ВремяСмещения);

                if (формируемоеСообщение.СостояниеВоспроизведения == SoundRecordStatus.ДобавленВОчередьРучное || формируемоеСообщение.СостояниеВоспроизведения == SoundRecordStatus.ВоспроизведениеРучное)
                {
                    if (MainWindowForm.QueueSound.FindItem(Данные.ID, формируемоеСообщение.Id) == null)
                        continue;

                    byte состояниеСтроки = 0;
                    switch (формируемоеСообщение.СостояниеВоспроизведения)
                    {
                        case SoundRecordStatus.ДобавленВОчередьРучное:
                            состояниеСтроки = 1;
                            break;

                        case SoundRecordStatus.ВоспроизведениеРучное:
                            состояниеСтроки = 4;
                            break;
                    }

                    TaskSound taskSound = new TaskSound
                    {
                        НомерСписка = 0,
                        СостояниеСтроки = состояниеСтроки,
                        Описание = Данные.НомерПоезда + " " + Данные.НазваниеПоезда + ": " + формируемоеСообщение.НазваниеШаблона,
                        Время = времяСобытия,
                        Ключ = key,
                        ParentId = формируемоеСообщение.Id,
                        ШаблонИлиСообщение = формируемоеСообщение.Шаблон
                    };

                    TaskManager.AddItem(taskSound);
                }
            }
        }

        private void CheckAutoApdate()
        {
            if (MainWindowForm.myMainForm == null)
                return;

            if (!Program.Настройки.РазрешениеАвтообновленияРасписания)
                return;

            var hourAutoApdate = Program.Настройки.ВремяАвтообновленияРасписания.Hour;
            var minuteAutoApdate = Program.Настройки.ВремяАвтообновленияРасписания.Minute;
            var secondAutoApdate = Program.Настройки.ВремяАвтообновленияРасписания.Second;

            if ((DateTime.Now.Hour == hourAutoApdate) && (DateTime.Now.Minute == minuteAutoApdate) && (DateTime.Now.Second == secondAutoApdate))
            {
                MainWindowForm.myMainForm.InvokeIfNeeded(() =>
                {
                    MainWindowForm.myMainForm.btnОбновитьСписок_Click(null, null);
                });
            }
        }
        private void SetSoundPlayerStatus(SoundPlayerStatus status)
        {
            if (MainWindowForm.myMainForm == null)
                return;

            MainWindowForm.myMainForm.InvokeIfNeeded(() =>
            {
                switch (status)
                {
                    case SoundPlayerStatus.Error:
                    case SoundPlayerStatus.Stop:
                    case SoundPlayerStatus.Paused:
                    case SoundPlayerStatus.Idle:
                        MainForm.Пауза.BackColor = Color.Gray;
                        //MainForm.Пауза.Enabled = false;
                        break;

                    case SoundPlayerStatus.Playing:
                        MainForm.Пауза.BackColor = Color.Red;
                        MainForm.Пауза.Enabled = true;
                        break;
                }
            });
        }


        public void ВоспроизвестиШаблонОповещения(string названиеСообщения, SoundRecord record, СостояниеФормируемогоСообщенияИШаблон формируемоеСообщение, ТипСообщения типСообщения)
        {
            try
            {
                if (!record.ВыводЗвука)
                    return;

                string logMessage = "";

                string[] файлыМинут = new string[] { "00 минут", "01 минута", "02 минуты", "03 минуты", "04 минуты", "05 минут", "06 минут", "07 минут", "08 минут",
                        "09 минут", "10 минут", "11 минут", "12 минут", "13 минут", "14 минут", "15 минут", "16 минут", "17 минут",
                        "18 минут", "19 минут", "20 минут", "21 минута", "22 минуты", "23 минуты", "24 минуты", "25 минут", "26 минут",
                        "27 минут", "28 минут", "29 минут", "30 минут", "31 минута", "32 минуты", "33 минуты", "34 минуты", "35 минут",
                        "36 минут", "37 минут", "38 минут", "39 минут", "40 минут", "41 минута", "42 минуты", "43 минуты", "44 минуты",
                        "45 минут", "46 минут", "47 минут", "48 минут", "49 минут", "50 минут", "51 минута", "52 минуты", "53 минуты",
                        "54 минуты", "55 минут", "56 минут", "57 минут", "58 минут", "59 минут" };


                string[] файлыЧасовПрефиксВ = new string[] { "В 00 часов", "В 01 час", "В 02 часа", "В 03 часа", "В 04 часа", "В 05 часов", "В 06 часов", "В 07 часов",
                                                                                        "В 08 часов", "В 09 часов", "В 10 часов", "В 11 часов", "В 12 часов", "В 13 часов", "В 14 часов", "В 15 часов",
                                                                                        "В 16 часов", "В 17 часов", "В 18 часов", "В 19 часов", "В 20 часов", "В 21 час", "В 22 часа", "В 23 часа" };

                string[] файлыЧасов = new string[] { "00 часов", "01 час", "02 часа", "03 часа", "04 часа", "05 часов", "06 часов", "07 часов",
                                                                                        "08 часов", "09 часов", "10 часов", "11 часов", "12 часов", "13 часов", "14 часов", "15 часов",
                                                                                        "16 часов", "17 часов", "18 часов", "19 часов", "20 часов", "21 час", "22 часа", "23 часа" };

                string[] названиеФайловНумерацииПутей = new string[] { "", "Нумерация с головы", "Нумерация с хвоста" };


                //сервис с препроцессором корректировки времени по часовому поясу.
                var option = new Dictionary<string, dynamic>
            {
                {"формируемоеСообщение", формируемоеСообщение }
            };
                var soundRecordPreprocessingService = PreprocessingOutputFactory.CreateSoundRecordPreprocessingService(option);
                soundRecordPreprocessingService.StartPreprocessing(ref record);


                //удалить англ. язык, если запрешенно произношения на аннглийском для данного типа поезда.
                if (!((record.ТипПоезда == ТипПоезда.Пассажирский && Program.Настройки.EngСообщНаПассажирскийПоезд) ||
                    (record.ТипПоезда == ТипПоезда.Пригородный && Program.Настройки.EngСообщНаПригородныйЭлектропоезд) ||
                    (record.ТипПоезда == ТипПоезда.Скоростной && Program.Настройки.EngСообщНаСкоростнойПоезд) ||
                    (record.ТипПоезда == ТипПоезда.Скорый && Program.Настройки.EngСообщНаСкорыйПоезд) ||
                    (record.ТипПоезда == ТипПоезда.Ласточка && Program.Настройки.EngСообщНаЛасточку) ||
                    (record.ТипПоезда == ТипПоезда.Фирменный && Program.Настройки.EngСообщНаФирменный) ||
                    (record.ТипПоезда == ТипПоезда.РЭКС && Program.Настройки.EngСообщНаРЭКС)))
                {
                    формируемоеСообщение.ЯзыкиОповещения.Remove(NotificationLanguage.Eng);
                }

                var воспроизводимыеСообщения = new List<ВоспроизводимоеСообщение>();

                var номераПутей = Program.TrackRepository.List().ToList();
                var путь = номераПутей.FirstOrDefault(p => p.Name == record.НомерПути);

                string eof = "X";
                Numeric2ListStringConverter numeric2ListStringConverter = new Numeric2ListStringConverter("X");

                string[] элементыШаблона = формируемоеСообщение.Шаблон.Split('|');
                foreach (var язык in формируемоеСообщение.ЯзыкиОповещения)
                {
                    foreach (string шаблон in элементыШаблона)
                    {
                        string текстПодстановки = String.Empty;

                        string text;
                        DateTime времяUtc;
                        switch (шаблон)
                        {
                            case "НА НОМЕР ПУТЬ":
                            case "НА НОМЕРом ПУТИ":
                            case "С НОМЕРого ПУТИ":
                                if (путь == null)
                                    break;
                                if (шаблон == "НА НОМЕР ПУТЬ") текстПодстановки = путь.НаНомерПуть;
                                if (шаблон == "НА НОМЕРом ПУТИ") текстПодстановки = путь.НаНомерОмПути;
                                if (шаблон == "С НОМЕРого ПУТИ") текстПодстановки = путь.СНомерОгоПути;

                                text = текстПодстановки;
                                logMessage += text + " ";
                                воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                {
                                    ИмяВоспроизводимогоФайла = text,
                                    ТипСообщения = типСообщения,
                                    Язык = язык,
                                    ParentId = формируемоеСообщение.Id,
                                    RootId = формируемоеСообщение.SoundRecordId,
                                    ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                });
                                break;

                            case "ПУТЬ ДОПОЛНЕНИЕ":
                                if (путь?.Addition == null)
                                    break;

                                text = путь.Addition;
                                logMessage += text + " ";
                                воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                {
                                    ИмяВоспроизводимогоФайла = text,
                                    ТипСообщения = типСообщения,
                                    Язык = язык,
                                    ParentId = формируемоеСообщение.Id,
                                    RootId = формируемоеСообщение.SoundRecordId,
                                    ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                });
                                break;

                            case "ПУТЬ ДОПОЛНЕНИЕ2":
                                if (путь?.Addition2 == null)
                                    break;

                                text = путь.Addition2;
                                logMessage += text + " ";
                                воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                {
                                    ИмяВоспроизводимогоФайла = text,
                                    ТипСообщения = типСообщения,
                                    Язык = язык,
                                    ParentId = формируемоеСообщение.Id,
                                    RootId = формируемоеСообщение.SoundRecordId,
                                    ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                });
                                break;

                            case "СТ.ОТПРАВЛЕНИЯ":
                                text = record.СтанцияОтправления;
                                logMessage += text + " ";
                                воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                {
                                    ИмяВоспроизводимогоФайла = text,
                                    ТипСообщения = типСообщения,
                                    Язык = язык,
                                    ParentId = формируемоеСообщение.Id,
                                    RootId = формируемоеСообщение.SoundRecordId,
                                    ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                });
                                break;


                            case "НОМЕР ПОЕЗДА":
                                text = record.НомерПоезда;
                                logMessage += text + " ";

                                var fileNames = numeric2ListStringConverter.Convert(text)?.Where(f => f != "0" && f != "0" + eof).ToList() ?? null;
                                if (fileNames != null && fileNames.Any())
                                {
                                    foreach (var fileName in fileNames)
                                    {
                                        воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                        {
                                            ИмяВоспроизводимогоФайла = "numeric_" + fileName,
                                            ТипСообщения = типСообщения,
                                            Язык = язык,
                                            ParentId = формируемоеСообщение.Id,
                                            RootId = формируемоеСообщение.SoundRecordId,
                                            ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                        });
                                    }
                                }
                                break;


                            case "НОМЕР ПОЕЗДА ТРАНЗИТ ОТПР":
                                if (!string.IsNullOrEmpty(record.НомерПоезда2))
                                {
                                    text = record.НомерПоезда2;
                                    logMessage += text + " ";

                                    fileNames = numeric2ListStringConverter.Convert(text)?.Where(f => f != "0" && f != "0" + eof).ToList() ?? null;
                                    if (fileNames != null && fileNames.Any())
                                    {
                                        foreach (var fileName in fileNames)
                                        {
                                            воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                            {
                                                ИмяВоспроизводимогоФайла = "numeric_" + fileName,
                                                ТипСообщения = типСообщения,
                                                Язык = язык,
                                                ParentId = формируемоеСообщение.Id,
                                                RootId = формируемоеСообщение.SoundRecordId,
                                                ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                            });
                                        }
                                    }
                                }
                                break;


                            case "ДОПОЛНЕНИЕ":
                                if (record.ИспользоватьДополнение != null && record.ИспользоватьДополнение["звук"])
                                {
                                    text = record.Дополнение;
                                    logMessage += text + " ";
                                    воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                    {
                                        ИмяВоспроизводимогоФайла = text,
                                        ТипСообщения = типСообщения,
                                        Язык = язык,
                                        ParentId = формируемоеСообщение.Id,
                                        RootId = формируемоеСообщение.SoundRecordId,
                                        ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                    });
                                }
                                break;


                            case "СТ.ПРИБЫТИЯ":
                                text = record.СтанцияНазначения;
                                logMessage += text + " ";
                                воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                {
                                    ИмяВоспроизводимогоФайла = text,
                                    ТипСообщения = типСообщения,
                                    Язык = язык,
                                    ParentId = формируемоеСообщение.Id,
                                    RootId = формируемоеСообщение.SoundRecordId,
                                    ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                });
                                break;


                            case "ВРЕМЯ ПРИБЫТИЯ":
                                logMessage += "Время прибытия: ";
                                text = record.ВремяПрибытия.ToString("HH:mm");
                                logMessage += text + " ";
                                воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                {
                                    ИмяВоспроизводимогоФайла = файлыЧасовПрефиксВ[record.ВремяПрибытия.Hour],
                                    ТипСообщения = типСообщения,
                                    Язык = язык,
                                    ParentId = формируемоеСообщение.Id,
                                    RootId = формируемоеСообщение.SoundRecordId,
                                    ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                });
                                воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                {
                                    ИмяВоспроизводимогоФайла = файлыМинут[record.ВремяПрибытия.Minute],
                                    ТипСообщения = типСообщения,
                                    Язык = язык,
                                    ParentId = формируемоеСообщение.Id,
                                    RootId = формируемоеСообщение.SoundRecordId,
                                    ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                });
                                continue;


                            case "ВРЕМЯ ПРИБЫТИЯ UTC":
                                logMessage += "Время прибытия: ";
                                времяUtc = record.ВремяПрибытия.AddMinutes(Program.Настройки.UTC);
                                text = времяUtc.ToString("HH:mm");
                                logMessage += text + " ";
                                воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                {
                                    ИмяВоспроизводимогоФайла = файлыЧасовПрефиксВ[времяUtc.Hour],
                                    ТипСообщения = типСообщения,
                                    Язык = язык,
                                    ParentId = формируемоеСообщение.Id,
                                    RootId = формируемоеСообщение.SoundRecordId,
                                    ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                });
                                воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                {
                                    ИмяВоспроизводимогоФайла = файлыМинут[времяUtc.Minute],
                                    ТипСообщения = типСообщения,
                                    Язык = язык,
                                    ParentId = формируемоеСообщение.Id,
                                    RootId = формируемоеСообщение.SoundRecordId,
                                    ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                });
                                continue;


                            case "ВРЕМЯ СТОЯНКИ":
                                if (record.ВремяСтоянки.HasValue)
                                {
                                    logMessage += "Стоянка: ";
                                    //text = record.ВремяСтоянки.Value.Hours.ToString("D2") + ":" + record.ВремяСтоянки.Value.Minutes.ToString("D2") + " минут";
                                    text = record.ВремяСтоянки.Value.ToString("hh\\:mm") + " минут";
                                    logMessage += text + " ";

                                    if (record.ВремяСтоянки.Value.Hours > 0)
                                    {
                                        воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                        {
                                            ИмяВоспроизводимогоФайла = файлыЧасов[record.ВремяСтоянки.Value.Hours],
                                            ТипСообщения = типСообщения,
                                            Язык = язык,
                                            ParentId = формируемоеСообщение.Id,
                                            RootId = формируемоеСообщение.SoundRecordId,
                                            ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                        });
                                    }
                                    воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                    {
                                        ИмяВоспроизводимогоФайла = файлыМинут[record.ВремяСтоянки.Value.Minutes],
                                        ТипСообщения = типСообщения,
                                        Язык = язык,
                                        ParentId = формируемоеСообщение.Id,
                                        RootId = формируемоеСообщение.SoundRecordId,
                                        ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                    });
                                }
                                else
                                if (record.БитыАктивностиПолей == 31) //У трнзита нет времени стоянки, занчит стоит галочка "будет измененно"
                                {
                                    logMessage += "Стоянка: будет измененно";
                                    воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                    {
                                        ИмяВоспроизводимогоФайла = "Будет изменено",
                                        ТипСообщения = типСообщения,
                                        Язык = язык,
                                        ParentId = формируемоеСообщение.Id,
                                        RootId = формируемоеСообщение.SoundRecordId,
                                        ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                    });
                                }
                                continue;



                            case "ВРЕМЯ ОТПРАВЛЕНИЯ":
                                logMessage += "Время отправления: ";
                                text = record.ВремяОтправления.ToString("HH:mm");
                                logMessage += text + " ";
                                воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                {
                                    ИмяВоспроизводимогоФайла = файлыЧасовПрефиксВ[record.ВремяОтправления.Hour],
                                    ТипСообщения = типСообщения,
                                    Язык = язык,
                                    ParentId = формируемоеСообщение.Id,
                                    RootId = формируемоеСообщение.SoundRecordId,
                                    ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                });
                                воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                {
                                    ИмяВоспроизводимогоФайла = файлыМинут[record.ВремяОтправления.Minute],
                                    ТипСообщения = типСообщения,
                                    Язык = язык,
                                    ParentId = формируемоеСообщение.Id,
                                    RootId = формируемоеСообщение.SoundRecordId,
                                    ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                });
                                continue;


                            case "ВРЕМЯ ОТПРАВЛЕНИЯ UTC":
                                logMessage += "Время отправления UTC: ";
                                времяUtc = record.ВремяОтправления.AddMinutes(Program.Настройки.UTC);
                                text = времяUtc.ToString("HH:mm");
                                logMessage += text + " ";
                                воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                {
                                    ИмяВоспроизводимогоФайла = файлыЧасовПрефиксВ[времяUtc.Hour],
                                    ТипСообщения = типСообщения,
                                    Язык = язык,
                                    ParentId = формируемоеСообщение.Id,
                                    RootId = формируемоеСообщение.SoundRecordId,
                                    ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                });
                                воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                {
                                    ИмяВоспроизводимогоФайла = файлыМинут[времяUtc.Minute],
                                    ТипСообщения = типСообщения,
                                    Язык = язык,
                                    ParentId = формируемоеСообщение.Id,
                                    RootId = формируемоеСообщение.SoundRecordId,
                                    ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                });
                                continue;


                            case "ВРЕМЯ ЗАДЕРЖКИ":
                                if (record.ВремяЗадержки != null)
                                //if (record.DelayTime != null && record.DelayTime.HasValue)
                                {
                                    logMessage += "Время задержки: ";
                                    text = record.ВремяЗадержки.Value.ToString("mm:ss");
                                    //text = record.DelayTime.Value.ToString("dd:HH:mm");
                                    logMessage += text + " ";

                                    if (record.ВремяЗадержки.Value.Minute > 0)
                                    //if (record.DelayTime.Value.TotalHours > 0)
                                    {
                                        воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                        {
                                            ИмяВоспроизводимогоФайла = файлыЧасов[record.ВремяЗадержки.Value.Minute],
                                            //ИмяВоспроизводимогоФайла = файлыЧасов[(int)record.DelayTime.Value.TotalHours],
                                            ТипСообщения = типСообщения,
                                            Язык = язык,
                                            ParentId = формируемоеСообщение.Id,
                                            RootId = формируемоеСообщение.SoundRecordId,
                                            ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                        });
                                    }
                                    воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                    {
                                        ИмяВоспроизводимогоФайла = файлыМинут[record.ВремяЗадержки.Value.Second],
                                        //ИмяВоспроизводимогоФайла = файлыМинут[record.DelayTime.Value.Minutes],
                                        ТипСообщения = типСообщения,
                                        Язык = язык,
                                        ParentId = формируемоеСообщение.Id,
                                        RootId = формируемоеСообщение.SoundRecordId,
                                        ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                    });
                                }
                                continue;


                            case "ОЖИДАЕМОЕ ВРЕМЯ":
                                logMessage += "Ожидаемое время: ";
                                text = record.ОжидаемоеВремя.ToString("HH:mm");
                                logMessage += text + " ";
                                воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                {
                                    ИмяВоспроизводимогоФайла = файлыЧасовПрефиксВ[record.ОжидаемоеВремя.Hour],
                                    ТипСообщения = типСообщения,
                                    Язык = язык,
                                    ParentId = формируемоеСообщение.Id,
                                    RootId = формируемоеСообщение.SoundRecordId,
                                    ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                });
                                воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                {
                                    ИмяВоспроизводимогоФайла = файлыМинут[record.ОжидаемоеВремя.Minute],
                                    ТипСообщения = типСообщения,
                                    Язык = язык,
                                    ParentId = формируемоеСообщение.Id,
                                    RootId = формируемоеСообщение.SoundRecordId,
                                    ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                });
                                continue;


                            case "ВРЕМЯ СЛЕДОВАНИЯ":
                                if (!record.ВремяСледования.HasValue)
                                    continue;

                                logMessage += "Время следования: ";
                                text = record.ВремяСледования.Value.ToString("HH:mm");
                                logMessage += text + " ";
                                воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                {
                                    ИмяВоспроизводимогоФайла = файлыЧасовПрефиксВ[record.ВремяСледования.Value.Hour],
                                    ТипСообщения = типСообщения,
                                    Язык = язык,
                                    ParentId = формируемоеСообщение.Id,
                                    RootId = формируемоеСообщение.SoundRecordId,
                                    ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                });
                                воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                {
                                    ИмяВоспроизводимогоФайла = файлыМинут[record.ВремяСледования.Value.Minute],
                                    ТипСообщения = типСообщения,
                                    Язык = язык,
                                    ParentId = формируемоеСообщение.Id,
                                    RootId = формируемоеСообщение.SoundRecordId,
                                    ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                });
                                continue;


                            case "НУМЕРАЦИЯ СОСТАВА":
                                if ((record.НумерацияПоезда > 0) && (record.НумерацияПоезда <= 2))
                                {
                                    //для транзитов
                                    var нумерацияПоезда = record.НумерацияПоезда;
                                    text = названиеФайловНумерацииПутей[нумерацияПоезда];
                                    logMessage += text + " ";
                                    воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                    {
                                        ИмяВоспроизводимогоФайла = text,
                                        ТипСообщения = типСообщения,
                                        Язык = язык,
                                        ParentId = формируемоеСообщение.Id,
                                        RootId = формируемоеСообщение.SoundRecordId,
                                        ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                    });
                                }
                                break;


                            case "СТАНЦИИ":
                                if ((record.ТипПоезда == ТипПоезда.Пригородный) || (record.ТипПоезда == ТипПоезда.Ласточка) ||
                                    (record.ТипПоезда == ТипПоезда.РЭКС))
                                {
                                    var списокСтанцийНаправления = Program.DirectionRepository.GetByName(record.Направление)?.Stations?.Select(st => st.NameRu).ToList();
                                    var списокСтанцийParse = record.Примечание.Substring(record.Примечание.IndexOf(":", StringComparison.Ordinal) + 1).Split(',').Select(st => st.Trim()).ToList();

                                    if (списокСтанцийНаправления == null || !списокСтанцийНаправления.Any())
                                        break;

                                    if (!списокСтанцийParse.Any())
                                        break;

                                    if (record.Примечание.Contains("Со всеми остановками"))
                                    {
                                        logMessage += "Электропоезд движется со всеми остановками ";
                                        if (Program.FilesFolder.Contains("СоВсемиОстановками"))
                                        {
                                            воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                            {
                                                ИмяВоспроизводимогоФайла = "СоВсемиОстановками",
                                                ТипСообщения = типСообщения,
                                                Язык = язык,
                                                ParentId = формируемоеСообщение.Id,
                                                RootId = формируемоеСообщение.SoundRecordId,
                                                ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                            });
                                        }
                                    }
                                    else if (record.Примечание.Contains("С остановк"))
                                    {
                                        logMessage += "Электропоезд движется с остановками на станциях: ";
                                        foreach (var станция in списокСтанцийНаправления)
                                            if (списокСтанцийParse.Contains(станция))
                                                logMessage += станция + " ";

                                        if (Program.FilesFolder.Contains("СОстановками"))
                                        {
                                            воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                            {
                                                ИмяВоспроизводимогоФайла = "СОстановками",
                                                ТипСообщения = типСообщения,
                                                Язык = язык,
                                                ParentId = формируемоеСообщение.Id,
                                                RootId = формируемоеСообщение.SoundRecordId,
                                                ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                            });
                                        }

                                        foreach (var станция in списокСтанцийНаправления)
                                            if (списокСтанцийParse.Contains(станция))
                                                if (Program.FilesFolder.Contains(станция))
                                                {
                                                    воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                                    {
                                                        ИмяВоспроизводимогоФайла = станция,
                                                        ТипСообщения = типСообщения,
                                                        Язык = язык,
                                                        ParentId = формируемоеСообщение.Id,
                                                        RootId = формируемоеСообщение.SoundRecordId,
                                                        ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                                    });
                                                }
                                    }
                                    else if (record.Примечание.Contains("Кроме"))
                                    {
                                        logMessage += "Электропоезд движется с остановками кроме станций: ";
                                        foreach (var станция in списокСтанцийНаправления)
                                            if (списокСтанцийParse.Contains(станция))
                                                logMessage += станция + " ";

                                        if (Program.FilesFolder.Contains("СОстановкамиКроме"))
                                        {
                                            воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                            {
                                                ИмяВоспроизводимогоФайла = "СОстановкамиКроме",
                                                ТипСообщения = типСообщения,
                                                Язык = язык,
                                                ParentId = формируемоеСообщение.Id,
                                                RootId = формируемоеСообщение.SoundRecordId,
                                                ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                            });
                                        }

                                        foreach (var станция in списокСтанцийНаправления)
                                            if (списокСтанцийParse.Contains(станция))
                                                if (Program.FilesFolder.Contains(станция))
                                                {
                                                    воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                                    {
                                                        ИмяВоспроизводимогоФайла = станция,
                                                        ТипСообщения = типСообщения,
                                                        Язык = язык,
                                                        ParentId = формируемоеСообщение.Id,
                                                        RootId = формируемоеСообщение.SoundRecordId,
                                                        ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                                    });
                                                }
                                    }
                                }
                                break;


                            default:
                                logMessage += шаблон + " ";
                                воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                                {
                                    ИмяВоспроизводимогоФайла = шаблон,
                                    ТипСообщения = типСообщения,
                                    Язык = язык,
                                    ParentId = формируемоеСообщение.Id,
                                    RootId = формируемоеСообщение.SoundRecordId,
                                    ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный
                                });
                                break;
                        }
                    }

                    //Пауза между языками
                    if ((формируемоеСообщение.ЯзыкиОповещения.Count > 1) && язык == NotificationLanguage.Ru)
                    {
                        воспроизводимыеСообщения.Add(new ВоспроизводимоеСообщение
                        {
                            ИмяВоспроизводимогоФайла = "СТОП ",
                            ТипСообщения = типСообщения,
                            Язык = язык,
                            ParentId = формируемоеСообщение.Id,
                            RootId = формируемоеСообщение.SoundRecordId,
                            ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный,
                            ВремяПаузы = (int)(Program.Настройки.ЗадержкаМеждуЗвуковымиСообщениями * 10.0)
                        });
                    }
                }

                var сообщениеШаблона = new ВоспроизводимоеСообщение
                {
                    ИмяВоспроизводимогоФайла = $"Шаблон: \"{формируемоеСообщение.НазваниеШаблона}\"",
                    ТипСообщения = типСообщения,
                    ParentId = (int?)((формируемоеСообщение.Id >= 0) ? (ValueType)формируемоеСообщение.Id : null),
                    RootId = формируемоеСообщение.SoundRecordId,
                    ПриоритетГлавный = формируемоеСообщение.ПриоритетГлавный,
                    ПриоритетВторостепенный = формируемоеСообщение.ПриоритетВторостепенный,
                    ОчередьШаблона = new Queue<ВоспроизводимоеСообщение>(воспроизводимыеСообщения)
                };

                for (int i = 0; i < record.КоличествоПовторений; i++)
                {
                    MainWindowForm.QueueSound.AddItem(сообщениеШаблона);
                }

                var логНомерПоезда = string.IsNullOrEmpty(record.НомерПоезда2) ? record.НомерПоезда : record.НомерПоезда + "/" + record.НомерПоезда2;
                var логНазваниеПоезда = record.НазваниеПоезда;
                Program.ЗаписьЛога(названиеСообщения, $"Формирование звукового сообщения для поезда \"№{логНомерПоезда}  {логНазваниеПоезда}\": " + logMessage + ". Повтор " + record.КоличествоПовторений + " раз.", Program.AuthenticationService.CurrentUser);
            }
            catch (Exception ex)
            {
                Log.log.Error(ex);
            }
        }
        
        public void СобытиеНачалоПроигрыванияОчередиЗвуковыхСообщений()
        {
            if (MainWindowForm.myMainForm == null)
                return;

            //Debug.WriteLine("НАЧАЛО ПРОИГРЫВАНИЯ");//DEBUG
            //Log.log.Fatal("НАЧАЛО ПРОИГРЫВАНИЯ ОЧЕРЕДИ");//DEBUG

            if (MainWindowForm.myMainForm.SoundChanelManagment != null)
            {
                var soundChUit = new UniversalInputType { SoundChanels = Program.Настройки.КаналыДальнегоСлед.ToList(), ViewBag = new Dictionary<string, dynamic>() };
                soundChUit.ViewBag["SoundChanelManagmentEventPlaying"] = "StartPlaying";

                MainWindowForm.myMainForm.SoundChanelManagment.AddOneTimeSendData(soundChUit); //период отсыла регулируется TimeRespone.
            }
        }
        public void СобытиеКонецПроигрыванияОчередиЗвуковыхСообщений()
        {
            if (MainWindowForm.myMainForm == null)
                return;

            //Debug.WriteLine("КОНЕЦ ПРОИГРЫВАНИЯ");//DEBUG
            //Log.log.Fatal("КОНЕЦ ПРОИГРЫВАНИЯ ОЧЕРЕДИ");//DEBUG

            if (MainWindowForm.myMainForm.SoundChanelManagment != null)
            {
                var soundChUit = new UniversalInputType { SoundChanels = Program.Настройки.КаналыДальнегоСлед.ToList(), ViewBag = new Dictionary<string, dynamic>() };
                soundChUit.ViewBag["SoundChanelManagmentEventPlaying"] = "StopPlaying";

                MainWindowForm.myMainForm.SoundChanelManagment.AddOneTimeSendData(soundChUit); //период отсыла регулируется TimeRespone.
            }
        }
    }
}
