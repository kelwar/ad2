using System;
using System.Linq;

namespace WCFCis2AvtodictorContract.Converters
{
    public enum РежимРасписанияДвиженияПоезда
    {
        Отсутствует = 0,
        Ежедневно = 1,
        ПоЧетным = 2,
        ПоНечетным = 3,
        Выборочно = 4,
        ПоДням = 5,
    };

    public class ПланРасписанияПоезда
    {
        private UInt32[] БитыРасписания;
        private РежимРасписанияДвиженияПоезда РежимРасписания;
        private string НомерПоезда;
        private string НазваниеПоезда;
        private byte АктивностьКрайнихДней;
        private ushort РаботаПоДням;

        public static string[] НазваниеМесяцев = { "Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", "Январь", "Февраль" };
        public static byte[] КоличествоДнейВМесяце = new byte[] { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 28 };
        public static string[] НазваниеДнейНедели = { "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье" };

        public ПланРасписанияПоезда()
        {
            БитыРасписания = new UInt32[14];
            РежимРасписания = new РежимРасписанияДвиженияПоезда();
            НомерПоезда = "";
            НазваниеПоезда = "";
            АктивностьКрайнихДней = 0x00;
            РаботаПоДням = 0x0000;
        }

        public string ПолучитьНомерПоезда()
        {
            return this.НомерПоезда;
        }

        public void УстановитьНомерПоезда(string НомерПоезда)
        {
            this.НомерПоезда = НомерПоезда;
        }

        public void УстановитьАктивностьПоездаВКрайниеДни(byte АктивностьКрайнихДней)
        {
            this.АктивностьКрайнихДней = АктивностьКрайнихДней;
        }

        public byte ПолучитьАктивностьПоездаВКрайниеДни()
        {
            return this.АктивностьКрайнихДней;
        }

        public string ПолучитьНазваниеПоезда()
        {
            return this.НазваниеПоезда;
        }

        public void УстановитьНазваниеПоезда(string НазваниеПоезда)
        {
            this.НазваниеПоезда = НазваниеПоезда;
        }

        public bool ПолучитьАктивностьДняДвижения(byte НомерМесяца, byte НомерДня)
        {
            if ((НомерМесяца < 14) && (НомерДня < 31))
            {
                if ((АктивностьКрайнихДней & 0x80) != 0x00)
                {
                    switch (НомерДня)
                    {
                        case 0: return ((АктивностьКрайнихДней & 0x02) != 0x00);
                        case 1: return ((АктивностьКрайнихДней & 0x04) != 0x00);
                        case 30: return ((АктивностьКрайнихДней & 0x01) != 0x00);
                    }
                }

                switch (РежимРасписания)
                {
                    case РежимРасписанияДвиженияПоезда.Отсутствует:
                        return false;

                    case РежимРасписанияДвиженияПоезда.Ежедневно:
                        return true;

                    case РежимРасписанияДвиженияПоезда.ПоЧетным:
                        return (НомерДня % 2) == 1 ? true : false;

                    case РежимРасписанияДвиженияПоезда.ПоНечетным:
                        return (НомерДня % 2) == 0 ? true : false;

                    case РежимРасписанияДвиженияПоезда.Выборочно:
                        return (БитыРасписания[НомерМесяца] & (1 << НомерДня)) != 0 ? true : false;

                    case РежимРасписанияДвиженияПоезда.ПоДням:
                        byte ДеньНедели = (byte)(((byte)new DateTime(DateTime.Now.Year + НомерМесяца / 12, (НомерМесяца % 12) + 1, НомерДня + 1).DayOfWeek + 6) % 7);
                        if ((РаботаПоДням & 0x00FF) != 0x0000) // По дням
                        {
                            if ((РаботаПоДням & (0x0001 << ДеньНедели)) != 0x0000)
                                return true;
                        }
                        else // Кроме дней
                        {
                            if ((РаботаПоДням & (0x0100 << ДеньНедели)) == 0x0000)
                                return true;
                        }
                        return false;
                }
            }

            return false;
        }

        public void ЗадатьАктивностьДняДвижения(byte НомерМесяца, byte НомерДня, bool Активность)
        {
            if ((НомерМесяца < 14) && (НомерДня < 31))
                if (Активность == true)
                    БитыРасписания[НомерМесяца] |= (uint)(1 << НомерДня);
                else
                    БитыРасписания[НомерМесяца] &= (uint)((1 << НомерДня) ^ 0xFFFFFFFF);
        }

        public void ЗадатьАктивностьПоДнямНедели(ushort АктивностьПоДнямНедели)
        {
            this.РаботаПоДням = АктивностьПоДнямНедели;
        }

        public ushort ПолучитьАктивностьПоДнямНедели()
        {
            return this.РаботаПоДням;
        }

        public РежимРасписанияДвиженияПоезда ПолучитьРежимРасписания()
        {
            return РежимРасписания;
        }

        public void ЗадатьРежимРасписания(РежимРасписанияДвиженияПоезда РежимРасписанияПоезда)
        {
            if (РежимРасписанияПоезда <= РежимРасписанияДвиженияПоезда.ПоДням)
                РежимРасписания = РежимРасписанияПоезда;
        }

        public string ПолучитьСтрокуРасписания()
        {
            string СтрокаРасписания = "";

            switch (РежимРасписания)
            {
                case РежимРасписанияДвиженияПоезда.Отсутствует:
                    СтрокаРасписания += "Отс:";
                    break;

                case РежимРасписанияДвиженияПоезда.Ежедневно:
                    СтрокаРасписания += "Еж:";
                    break;

                case РежимРасписанияДвиженияПоезда.ПоЧетным:
                    СтрокаРасписания += "ПоЧет:";
                    break;

                case РежимРасписанияДвиженияПоезда.ПоНечетным:
                    СтрокаРасписания += "ПоНеч:";
                    break;

                case РежимРасписанияДвиженияПоезда.Выборочно:
                    СтрокаРасписания += "Выб:";
                    break;

                case РежимРасписанияДвиженияПоезда.ПоДням:
                    СтрокаРасписания += "ПоДням:";
                    break;
            }

            for (byte i = 0; i < 14; i++)
                СтрокаРасписания += БитыРасписания[i].ToString() + ":";

            СтрокаРасписания += РаботаПоДням.ToString() + ":" + АктивностьКрайнихДней.ToString();

            return СтрокаРасписания;
        }

        public string ПолучитьСтрокуОписанияРасписания()
        {
            string СтрокаРасписания = "Режим работы: ";

            switch (РежимРасписания)
            {
                case РежимРасписанияДвиженияПоезда.Отсутствует:
                    СтрокаРасписания += "Движение отсутствует";
                    break;

                case РежимРасписанияДвиженияПоезда.Ежедневно:
                    СтрокаРасписания += "Ежедневно";
                    break;

                case РежимРасписанияДвиженияПоезда.ПоЧетным:
                    СтрокаРасписания += "По четным дням";
                    break;

                case РежимРасписанияДвиженияПоезда.ПоНечетным:
                    СтрокаРасписания += "По нечетным дням";
                    break;

                case РежимРасписанияДвиженияПоезда.Выборочно:
                    СтрокаРасписания += "Выборочные дни: ";
                    for (int i = 0; i < 12; i++)
                    {
                        if (БитыРасписания[i] != 0x00000000)
                        {
                            СтрокаРасписания += НазваниеМесяцев[i] + ":";
                            for (int j = 0; j < 31; j++)
                                if ((БитыРасписания[i] & (1 << j)) != 0x00000000)
                                    СтрокаРасписания += (j + 1).ToString() + ",";
                        }
                    }

                    if (СтрокаРасписания.Length > 1)
                        if (СтрокаРасписания[СтрокаРасписания.Length - 1] == ',')
                            СтрокаРасписания = СтрокаРасписания.Remove(СтрокаРасписания.Length - 1);
                    break;

                case РежимРасписанияДвиженияПоезда.ПоДням:
                    if ((РаботаПоДням & 0x007F) != 0x0000)
                    {
                        СтрокаРасписания += "По дням недели: ";
                        for (int i = 0; i < 7; i++)
                            if ((РаботаПоДням & (0x0001 << i)) != 0x0000)
                                СтрокаРасписания += НазваниеДнейНедели[i] + ",";
                    }
                    else if ((РаботаПоДням & 0x7F00) != 0x0000)
                    {
                        СтрокаРасписания += "Кроме дней недели: ";
                        for (int i = 0; i < 7; i++)
                            if ((РаботаПоДням & (0x0100 << i)) != 0x0000)
                                СтрокаРасписания += НазваниеДнейНедели[i] + ",";
                    }

                    if (СтрокаРасписания.Length > 1)
                        if (СтрокаРасписания[СтрокаРасписания.Length - 1] == ',')
                            СтрокаРасписания = СтрокаРасписания.Remove(СтрокаРасписания.Length - 1);
                    break;
            }

            if (((АктивностьКрайнихДней & 0x80) != 0x00) && ((АктивностьКрайнихДней & 0x07) != 0x00))
            {
                СтрокаРасписания += ". На границе месяца активные числа: ";
                if ((АктивностьКрайнихДней & 0x01) != 0x00) СтрокаРасписания += "31,";
                if ((АктивностьКрайнихДней & 0x02) != 0x00) СтрокаРасписания += "1,";
                if ((АктивностьКрайнихДней & 0x04) != 0x00) СтрокаРасписания += "2,";
                СтрокаРасписания = СтрокаРасписания.Remove(СтрокаРасписания.Length - 1);
            }

            return СтрокаРасписания;
        }

        public static ПланРасписанияПоезда ПолучитьИзСтрокиПланРасписанияПоезда(string РасписаниеПоезда)
        {
            ПланРасписанияПоезда ПланРасписания = new ПланРасписанияПоезда();

            string[] ПланПоМесяцам = РасписаниеПоезда.Split(':');
            if (ПланПоМесяцам.Length == 17)
            {
                if (ПланПоМесяцам[0].Contains("Отс"))
                    ПланРасписания.ЗадатьРежимРасписания(РежимРасписанияДвиженияПоезда.Отсутствует);
                else if (ПланПоМесяцам[0].Contains("Еж"))
                    ПланРасписания.ЗадатьРежимРасписания(РежимРасписанияДвиженияПоезда.Ежедневно);
                else if (ПланПоМесяцам[0].Contains("ПоЧет"))
                    ПланРасписания.ЗадатьРежимРасписания(РежимРасписанияДвиженияПоезда.ПоЧетным);
                else if (ПланПоМесяцам[0].Contains("ПоНеч"))
                    ПланРасписания.ЗадатьРежимРасписания(РежимРасписанияДвиженияПоезда.ПоНечетным);
                else if (ПланПоМесяцам[0].Contains("Выб"))
                    ПланРасписания.ЗадатьРежимРасписания(РежимРасписанияДвиженияПоезда.Выборочно);
                else if (ПланПоМесяцам[0].Contains("ПоДням"))
                    ПланРасписания.ЗадатьРежимРасписания(РежимРасписанияДвиженияПоезда.ПоДням);
                else
                    return ПланРасписания;

                UInt32 TempUInt32 = 0x00000000;
                for (byte i = 0; i < 14; i++)
                    if (UInt32.TryParse(ПланПоМесяцам[i + 1], out TempUInt32) == true)
                    {
                        ПланРасписания.БитыРасписания[i] = TempUInt32;
                    }

                UInt16 TempUInt16 = 0x0000;
                if (UInt16.TryParse(ПланПоМесяцам[15], out TempUInt16) == true)
                    ПланРасписания.РаботаПоДням = TempUInt16;

                byte TempByte = 0x00;
                if (byte.TryParse(ПланПоМесяцам[16], out TempByte) == true)
                    ПланРасписания.АктивностьКрайнихДней = TempByte;
            }
            else
            {
                if (РасписаниеПоезда.Contains("Январь"))
                {
                    ПланРасписания.ЗадатьРежимРасписания(РежимРасписанияДвиженияПоезда.Выборочно);
                    if (ПланПоМесяцам.Length == 12)
                    {
                        for (byte i = 0; i < 12; i++)
                        {
                            string[] ПоляМесячногоПлана = ПланПоМесяцам[i].Split(',');

                            if (ПоляМесячногоПлана.Contains("Отсутствует")) { }
                            else if (ПоляМесячногоПлана.Contains("Ежедневно")) { }
                            else if (ПоляМесячногоПлана.Contains("ПоЧетным")) { }
                            else if (ПоляМесячногоПлана.Contains("ПоНечетным")) { }
                            else
                            {
                                foreach (string item in ПоляМесячногоПлана)
                                {
                                    int День = 0;
                                    if (int.TryParse(item, out День))
                                        if ((День > 0) && (День < 32))
                                            ПланРасписания.ЗадатьАктивностьДняДвижения(i, (byte)(День - 1), true);
                                }
                            }

                        }
                    }

                }
            }

            return ПланРасписания;
        }


        public bool ПроверитьАктивностьРасписания()
        {
            DateTime ПервыйАктивныйДень = new DateTime(2000, 1, 1);
            DateTime ПоследнийАктивныйДень = new DateTime(2000, 1, 1);
            bool ПервыйДеньНайден = false;


            for (byte НомерМесяца = 0; НомерМесяца < 14; НомерМесяца++)
            {
                byte ПоследнийДеньМесяца = КоличествоДнейВМесяце[НомерМесяца];
                if ((((DateTime.Now.Year + НомерМесяца / 12) % 4) == 0) && ((НомерМесяца % 12) == 1)) ПоследнийДеньМесяца = 29;
                for (byte НомерДня = 0; НомерДня < 31; НомерДня++)
                {
                    bool Результат = ПолучитьАктивностьДняДвижения(НомерМесяца, НомерДня);

                    if (Результат == true)
                    {
                        if (ПервыйДеньНайден == false)
                        {
                            ПервыйДеньНайден = true;
                            ПервыйАктивныйДень = new DateTime(DateTime.Now.Year + (НомерМесяца / 12), (НомерМесяца % 12) + 1, НомерДня + 1, 0, 0, 0);
                        }

                        try
                        {
                            ПоследнийАктивныйДень = new DateTime(DateTime.Now.Year + (НомерМесяца / 12), (НомерМесяца % 12) + 1, НомерДня + 1, 23, 59, 59);
                        }
                        catch (Exception ex)
                        {
                            //ex.Message;
                        }
                    }
                }
            }

            if ((DateTime.Now >= ПервыйАктивныйДень) && (DateTime.Now <= ПоследнийАктивныйДень))
                return true;

            return false;
        }
    }
}